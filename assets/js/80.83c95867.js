(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{405:function(e,o,t){"use strict";t.r(o);var n=t(4),r=Object(n.a)({},(function(){var e=this,o=e._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("ol",[o("li",[o("p",[e._v("Pod 被删除，状态变为 "),o("code",[e._v("Terminating")]),e._v("。从 API 层面看就是 Pod metadata 中的 deletionTimestamp 字段会被标记上删除时间。")])]),e._v(" "),o("li",[o("p",[e._v("kube-proxy watch 到了就开始更新转发规则，将 Pod 从 service 的 endpoint 列表中摘除掉，新的流量不再转发到该 Pod。")])]),e._v(" "),o("li",[o("p",[e._v("kubelet watch 到了就开始销毁 Pod。")]),e._v(" "),o("p",[e._v("3.1. 如果 Pod 中有 container 配置了 "),o("a",{attrs:{href:"https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/",target:"_blank",rel:"noopener noreferrer"}},[e._v("preStop Hook"),o("OutboundLink")],1),e._v(" ，将会执行。")]),e._v(" "),o("p",[e._v("3.2. 发送 "),o("code",[e._v("SIGTERM")]),e._v(" 信号给容器内主进程以通知容器进程开始优雅停止。")]),e._v(" "),o("p",[e._v("3.3. 等待 container 中的主进程完全停止，如果在 "),o("code",[e._v("terminationGracePeriodSeconds")]),e._v(" 内 (默认 30s) 还未完全停止，就发送 "),o("code",[e._v("SIGKILL")]),e._v(" 信号将其强制杀死。")]),e._v(" "),o("p",[e._v("3.4. 所有容器进程终止，清理 Pod 资源。")]),e._v(" "),o("p",[e._v("3.5. 通知 APIServer Pod 销毁完成，完成 Pod 删除。")])])])])}),[],!1,null,null,null);o.default=r.exports}}]);