(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{372:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"一、kubernetes基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、kubernetes基础"}},[s._v("#")]),s._v(" 一、Kubernetes基础")]),s._v(" "),t("p",[s._v("​\t\tKubernetes是谷歌以Borg为前身，基于谷歌15年生产环境经验的基础上开源的一个项目，Kubernetes致力于提供跨主机集群的自动部署、扩展、高可用以及运行应用程序容器的平台。")]),s._v(" "),t("h2",{attrs:{id:"_1-master节点-整个集群的控制中枢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-master节点-整个集群的控制中枢"}},[s._v("#")]),s._v(" 1  Master节点：整个集群的控制中枢")]),s._v(" "),t("p",[s._v("Ø Kube-APIServer：集群的控制中枢，各个模块之间信息交互都需要经过Kube-APIServer，同时它也是集群管理、资源配置、整个集群安全机制的入口。")]),s._v(" "),t("p",[s._v("Ø Controller-Manager：集群的状态管理器，保证Pod或其他资源达到期望值，也是需要和APIServer进行通信，在需要的时候创建、更新或删除它所管理的资源。")]),s._v(" "),t("p",[s._v("Ø Scheduler：集群的调度中心，它会根据指定的一系列条件，选择一个或一批最佳的节点，然后部署我们的Pod。")]),s._v(" "),t("p",[s._v("Ø Etcd：键值数据库，报错一些集群的信息，一般生产环境中建议部署三个以上节点（奇数个）。")]),s._v(" "),t("h2",{attrs:{id:"_2-node-工作节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-node-工作节点"}},[s._v("#")]),s._v(" 2  Node：工作节点")]),s._v(" "),t("p",[s._v("Worker、node节点、minion节点")]),s._v(" "),t("p",[s._v("Ø Kubelet：负责监听节点上Pod的状态，同时负责上报节点和节点上面Pod的状态，负责与Master节点通信，并管理节点上面的Pod。")]),s._v(" "),t("p",[s._v("Ø Kube-proxy：负责Pod之间的通信和负载均衡，将指定的流量分发到后端正确的机器上。")]),s._v(" "),t("p",[s._v("Ø 查看Kube-proxy工作模式：curl 127.0.0.1:10249/proxyMode")]),s._v(" "),t("p",[s._v("l Ipvs：监听Master节点增加和删除service以及endpoint的消息，调用Netlink接口创建相应的IPVS规则。通过IPVS规则，将流量转发至相应的Pod上。")]),s._v(" "),t("p",[s._v("l Iptables：监听Master节点增加和删除service以及endpoint的消息，对于每一个Service，他都会场景一个iptables规则，将service的clusterIP代理到后端对应的Pod。")]),s._v(" "),t("p",[s._v("其他组件")]),s._v(" "),t("p",[s._v("Ø Calico：符合CNI标准的网络插件，给每个Pod生成一个唯一的IP地址，并且把每个节点当做一个路由器。Cilium")]),s._v(" "),t("p",[s._v("Ø CoreDNS：用于Kubernetes集群内部Service的解析，可以让Pod把Service名称解析成IP地址，然后通过Service的IP地址进行连接到对应的应用上。")]),s._v(" "),t("p",[s._v("Ø Docker：容器引擎，负责对容器的管理。")]),s._v(" "),t("h1",{attrs:{id:"二、pod"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、pod"}},[s._v("#")]),s._v(" 二、Pod")]),s._v(" "),t("h2",{attrs:{id:"_1-、什么是pod"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-、什么是pod"}},[s._v("#")]),s._v(" 1 、什么是Pod？")]),s._v(" "),t("p",[s._v("​\t\tPod是Kubernetes中最小的单元，它由一组、一个或多个容器组成，每个Pod还包含了一个Pause容器，Pause容器是Pod的父容器，主要负责僵尸进程的回收管理，通过Pause容器可以使同一个Pod里面的多个容器共享存储、网络、PID、IPC等。")]),s._v(" "),t("h2",{attrs:{id:"_2、定义一个pod"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、定义一个pod"}},[s._v("#")]),s._v(" 2、定义一个Pod")]),s._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" v1 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 必选，API的版本号")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Pod       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 必选，类型Pod")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 必选，元数据")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" nginx   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 必选，符合RFC 1035规范的Pod名称")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# namespace: default # 可选，Pod所在的命名空间，不指定默认为default，可以使用-n 指定namespace ")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("labels")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可选，标签选择器，一般用于过滤和区分Pod")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("app")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" nginx\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("role")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" frontend "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可以写多个")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("annotations")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可选，注释列表，可以写多个")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("app")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" nginx\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 必选，用于定义容器的详细信息")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  initContainers: # 初始化容器，在容器启动之前执行的一些初始化操作")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  - command:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    - sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    - -c")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#    - echo "I am InitContainer for init some configuration"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    image: busybox")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    imagePullPolicy: IfNotPresent")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    name: init-container")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("containers")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 必选，容器列表")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" nginx "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 必选，符合RFC 1035规范的容器名称")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" nginx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("1.15.2    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 必选，容器所用的镜像的地址")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("imagePullPolicy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" IfNotPresent     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可选，镜像拉取策略, IfNotPresent: 如果宿主机有这个镜像，那就不需要拉取了. Always: 总是拉取, Never: 不管是否存储都不拉去")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("command")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可选，容器启动执行的命令 ENTRYPOINT, arg --\x3e cmd")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" nginx \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("g\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"daemon off;"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("workingDir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" /usr/share/nginx/html       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可选，容器的工作目录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    volumeMounts:   # 可选，存储卷配置，可以配置多个")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    - name: webroot # 存储卷名称")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      mountPath: /usr/share/nginx/html # 挂载目录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      readOnly: true        # 只读")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ports")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可选，容器需要暴露的端口号列表")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" http    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 端口名称")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("containerPort")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 端口号")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("protocol")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" TCP "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 端口协议，默认TCP")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("env")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可选，环境变量配置列表")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" TZ      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 变量名")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Asia/Shanghai "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 变量的值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" LANG\n      "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" en_US.utf8\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    resources:      # 可选，资源限制和资源请求限制")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      limits:       # 最大限制设置")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        cpu: 1000m")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        memory: 1024Mi")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      requests:     # 启动所需的资源")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        cpu: 100m")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        memory: 512Mi")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    startupProbe: # 可选，检测容器内进程是否完成启动。注意三种检查方式同时只能使用一种。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      httpGet:      # httpGet检测方式，生产环境建议使用httpGet实现接口级健康检查，健康检查由应用程序提供。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#            path: /api/successStart # 检查路径")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#            port: 80")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    readinessProbe: # 可选，健康检查。注意三种检查方式同时只能使用一种。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      httpGet:      # httpGet检测方式，生产环境建议使用httpGet实现接口级健康检查，健康检查由应用程序提供。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#            path: / # 检查路径")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#            port: 80        # 监控端口")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    livenessProbe:  # 可选，健康检查")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#exec:        # 执行容器命令检测方式")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#command: ")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#- cat")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#- /health")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#httpGet:       # httpGet检测方式")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   path: /_health # 检查路径")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   port: 8080")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   httpHeaders: # 检查的请求头")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   - name: end-user")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     value: Jason ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      tcpSocket:    # 端口检测方式")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#            port: 80")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      initialDelaySeconds: 60       # 初始化时间")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      timeoutSeconds: 2     # 超时时间")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      periodSeconds: 5      # 检测间隔")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      successThreshold: 1 # 检查成功为2次表示就绪")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      failureThreshold: 2 # 检测失败1次表示未就绪")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    lifecycle:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      postStart: # 容器创建完成后执行的指令, 可以是exec httpGet TCPSocket")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        exec:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#          command:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#          - sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#          - -c")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#          - 'mkdir /data/ '")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      preStop:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        httpGet:      ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#              path: /")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#              port: 80")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  exec:")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    command:")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    - sh")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    - -c")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    - sleep 9")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("restartPolicy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Always   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可选，默认为Always，容器故障或者没有启动成功，那就自动该容器，Onfailure: 容器以不为0的状态终止，自动重启该容器, Never:无论何种状态，都不会重启")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#nodeSelector: # 可选，指定Node节点")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      region: subnet7")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  imagePullSecrets:     # 可选，拉取镜像使用的secret，可以配置多个")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  - name: default-dockercfg-86258")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  hostNetwork: false    # 可选，是否为主机模式，如是，会占用主机端口")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  volumes:      # 共享存储卷列表")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  - name: webroot # 名称，与上述对应")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    emptyDir: {}    # 挂载目录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        #hostPath:              # 挂载本机目录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#        #  path: /etc/hosts")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br"),t("span",{staticClass:"line-number"},[s._v("84")]),t("br"),t("span",{staticClass:"line-number"},[s._v("85")]),t("br"),t("span",{staticClass:"line-number"},[s._v("86")]),t("br"),t("span",{staticClass:"line-number"},[s._v("87")]),t("br"),t("span",{staticClass:"line-number"},[s._v("88")]),t("br"),t("span",{staticClass:"line-number"},[s._v("89")]),t("br"),t("span",{staticClass:"line-number"},[s._v("90")]),t("br"),t("span",{staticClass:"line-number"},[s._v("91")]),t("br"),t("span",{staticClass:"line-number"},[s._v("92")]),t("br"),t("span",{staticClass:"line-number"},[s._v("93")]),t("br"),t("span",{staticClass:"line-number"},[s._v("94")]),t("br"),t("span",{staticClass:"line-number"},[s._v("95")]),t("br"),t("span",{staticClass:"line-number"},[s._v("96")]),t("br"),t("span",{staticClass:"line-number"},[s._v("97")]),t("br"),t("span",{staticClass:"line-number"},[s._v("98")]),t("br"),t("span",{staticClass:"line-number"},[s._v("99")]),t("br"),t("span",{staticClass:"line-number"},[s._v("100")]),t("br"),t("span",{staticClass:"line-number"},[s._v("101")]),t("br"),t("span",{staticClass:"line-number"},[s._v("102")]),t("br")])]),t("h2",{attrs:{id:"_3、pod探针"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、pod探针"}},[s._v("#")]),s._v(" 3、Pod探针")]),s._v(" "),t("p",[s._v("Ø StartupProbe：k8s1.16版本后新加的探测方式，用于判断容器内应用程序是否已经启动。如果配置了startupProbe，就会先禁止其他的探测，直到它成功为止，成功后将不在进行探测。")]),s._v(" "),t("p",[s._v("Ø LivenessProbe：用于探测容器是否运行，如果探测失败，kubelet会根据配置的重启策略进行相应的处理。若没有配置该探针，默认就是success。")]),s._v(" "),t("p",[s._v("Ø ReadinessProbe：一般用于探测容器内的程序是否健康，它的返回值如果为success，那么久代表这个容器已经完成启动，并且程序已经是可以接受流量的状态。")]),s._v(" "),t("h2",{attrs:{id:"_4、pod探针的检测方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、pod探针的检测方式"}},[s._v("#")]),s._v(" 4、Pod探针的检测方式")]),s._v(" "),t("p",[s._v("Ø ExecAction：在容器内执行一个命令，如果返回值为0，则认为容器健康。")]),s._v(" "),t("p",[s._v("Ø TCPSocketAction：通过TCP连接检查容器内的端口是否是通的，如果是通的就认为容器健康。")]),s._v(" "),t("p",[s._v("Ø HTTPGetAction：通过应用程序暴露的API地址来检查程序是否是正常的，如果状态码为200~400之间，则认为容器健康。")]),s._v(" "),t("h2",{attrs:{id:"_5、探针检查参数配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、探针检查参数配置"}},[s._v("#")]),s._v(" 5、探针检查参数配置")]),s._v(" "),t("p",[s._v("#    initialDelaySeconds: 60    # 初始化时间")]),s._v(" "),t("p",[s._v("#    timeoutSeconds: 2   # 超时时间")]),s._v(" "),t("p",[s._v("#    periodSeconds: 5    # 检测间隔")]),s._v(" "),t("p",[s._v("#    successThreshold: 1 # 检查成功为1次表示就绪")]),s._v(" "),t("p",[s._v("#    failureThreshold: 2 # 检测失败2次表示未就绪")]),s._v(" "),t("p",[s._v("Prestop：先去请求eureka接口，把自己的IP地址和端口号，进行下线，eureka从注册表中删除该应用的IP地址。然后容器进行sleep 90；kill "),t("code",[s._v("pgrep java")])])])}),[],!1,null,null,null);t.default=e.exports}}]);