(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{410:function(s,e,a){"use strict";a.r(e);var t=a(4),n=Object(t.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"网络性能调优"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络性能调优"}},[s._v("#")]),s._v(" 网络性能调优")]),s._v(" "),e("h2",{attrs:{id:"高并发场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高并发场景"}},[s._v("#")]),s._v(" 高并发场景")]),s._v(" "),e("h3",{attrs:{id:"time-wait-连接复用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#time-wait-连接复用"}},[s._v("#")]),s._v(" TIME_WAIT 连接复用")]),s._v(" "),e("p",[s._v("如果短连接并发量较高，它所在 netns 中 TIME_WAIT 状态的连接就比较多，而 TIME_WAIT 连接默认要等 2MSL 时长才释放，长时间占用源端口，当这种状态连接数量累积到超过一定量之后可能会导致无法新建连接。")]),s._v(" "),e("p",[s._v("所以建议开启 TIME_WAIT 复用，即允许将 TIME_WAIT 连接重新用于新的 TCP 连接:")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("net.ipv4.tcp_tw_reuse")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("blockquote",[e("p",[s._v("在高版本内核中，"),e("code",[s._v("net.ipv4.tcp_tw_reuse")]),s._v(" 默认值为 2，表示仅为回环地址开启复用，基本可以粗略的认为没开启复用。")])]),s._v(" "),e("h3",{attrs:{id:"扩大源端口范围"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩大源端口范围"}},[s._v("#")]),s._v(" 扩大源端口范围")]),s._v(" "),e("p",[s._v("高并发场景，对于 client 来说会使用大量源端口，源端口范围从 "),e("code",[s._v("net.ipv4.ip_local_port_range")]),s._v(" 这个内核参数中定义的区间随机选取，在高并发环境下，端口范围小容易导致源端口耗尽，使得部分连接异常。通常 Pod 源端口范围默认是 32768-60999，建议将其扩大，调整为 1024-65535: "),e("code",[s._v('sysctl -w net.ipv4.ip_local_port_range="1024 65535"')]),s._v("。")]),s._v(" "),e("h3",{attrs:{id:"调大最大文件句柄数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调大最大文件句柄数"}},[s._v("#")]),s._v(" 调大最大文件句柄数")]),s._v(" "),e("p",[s._v("在 linux 中，每个连接都会占用一个文件句柄，所以句柄数量限制同样也会限制最大连接数， 对于像 Nginx  这样的反向代理，对于每个请求，它会与 client 和 upstream server 分别建立一个连接，即占据两个文件句柄，所以理论上来说  Nginx 能同时处理的连接数最多是系统最大文件句柄数限制的一半。")]),s._v(" "),e("p",[s._v("系统最大文件句柄数由 "),e("code",[s._v("fs.file-max")]),s._v(" 这个内核参数来控制，一些环境默认值可能为 838860，建议调大:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("fs.file-max=1048576\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h3",{attrs:{id:"调大全连接连接队列的大小"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调大全连接连接队列的大小"}},[s._v("#")]),s._v(" 调大全连接连接队列的大小")]),s._v(" "),e("p",[s._v("TCP 全连接队列的长度如果过小，在高并发环境可能导致队列溢出，使得部分连接无法建立。")]),s._v(" "),e("p",[s._v("如果因全连接队列溢出导致了丢包，从统计的计数上是可以看出来的：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("# 用 netstat 查看统计\n$ netstat -s | grep -E 'overflow|drop'\n    12178939 times the listen queue of a socket overflowed\n    12247395 SYNs to LISTEN sockets dropped\n    \n# 也可以用 nstat 查看计数器\n$ nstat -az | grep -E 'TcpExtListenOverflows|TcpExtListenDrops'\nTcpExtListenOverflows           12178939              0.0\nTcpExtListenDrops               12247395              0.0\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("全连接队列的大小取决于 "),e("code",[s._v("net.core.somaxconn")]),s._v(" 内核参数以及业务进程调用 listen 时传入的 backlog 参数，取两者中的较小值("),e("code",[s._v("min(backlog,somaxconn)")]),s._v(")，一些编程语言通常是默认取 "),e("code",[s._v("net.core.somaxconn")]),s._v(" 参数的值作为 backlog 参数传入 listen 系统调用（比如Go语言）。")]),s._v(" "),e("p",[s._v("高并发环境可以考虑将其改到 "),e("code",[s._v("65535")]),s._v(":")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nsysctl -w net.core.somaxconn=65535\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("如何查看队列大小来验证是否成功调整队列大小？可以执行 "),e("code",[s._v("ss -lntp")]),s._v(" 看 "),e("code",[s._v("Send-Q")]),s._v(" 的值。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\n$ ss -lntp\nState        Recv-Q       Send-Q             Local Address:Port             Peer Address:Port      Process\nLISTEN       0            65535                    0.0.0.0:80                    0.0.0.0:*          users:(("nginx",pid=347916,fd=6),("nginx",pid=347915,fd=6),("nginx",pid=347887,fd=6))\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("blockquote",[e("p",[s._v("ss 用 -l 查看 LISTEN 状态连接时，"),e("code",[s._v("Recv-Q")]),s._v(" 表示的当前已建连但还未被服务端调用 "),e("code",[s._v("accept()")]),s._v(" 取走的连接数量，即全连接队列中的连接数；"),e("code",[s._v("Send-Q")]),s._v(" 表示的则是最大的 listen backlog 数值，即全连接队列大小。如果 "),e("code",[s._v("Recv-Q")]),s._v(" 大小接近 "),e("code",[s._v("Send-Q")]),s._v(" 的大小时，说明连接队列可能溢出。")])]),s._v(" "),e("p",[s._v("需要注意的是，Nginx 在 listen 时并没有读取 somaxconn 作为 backlog 参数传入，而是在 nginx 配置文件中有自己单独的参数配置:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nserver {\n    listen  80  backlog=1024;\n    ...\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("如果不设置，backlog 在 linux 上默认为 511:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nbacklog=number\n   sets the backlog parameter in the listen() call that limits the maximum length for the queue of pending connections. By default, backlog is set to -1 on FreeBSD, DragonFly BSD, and macOS, and to 511 on other platforms.\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("也就是说，即便你的 "),e("code",[s._v("somaxconn")]),s._v(" 配的很高，nginx 所监听端口的连接队列最大却也只有 511，高并发场景下还是可能导致连接队列溢出，所以建议配置下 nginx 的 backlog 参数。")]),s._v(" "),e("p",[s._v("不过如果用的是 Nginx Ingress ，情况又不太一样，因为 Nginx Ingress Controller 会自动读取 somaxconn 的值作为 backlog 参数写到生成的 "),e("code",[s._v("nginx.conf")]),s._v(" 中，参考 "),e("a",{attrs:{href:"https://github.com/kubernetes/ingress-nginx/blob/controller-v0.34.1/internal/ingress/controller/nginx.go#L592",target:"_blank",rel:"noopener noreferrer"}},[s._v("源码"),e("OutboundLink")],1),s._v("。")]),s._v(" "),e("h2",{attrs:{id:"高吞吐场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高吞吐场景"}},[s._v("#")]),s._v(" 高吞吐场景")]),s._v(" "),e("h3",{attrs:{id:"调大-udp-缓冲区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调大-udp-缓冲区"}},[s._v("#")]),s._v(" 调大 UDP 缓冲区")]),s._v(" "),e("p",[s._v("UDP socket 的发送和接收缓冲区是有上限的，如果缓冲区较小，高并发环境可能导致缓冲区满而丢包，从网络计数可以看出来:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("# 使用 netstat 查看统计\n$ netstat -s | grep \"buffer errors\"\n    429469 receive buffer errors\n    23568 send buffer errors\n \n# 也可以用 nstat 查看计数器\n$ nstat -az | grep -E 'UdpRcvbufErrors|UdpSndbufErrors'\nUdpRcvbufErrors                 429469                 0.0\nUdpSndbufErrors                 23568                  0.0\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("还可以使用 "),e("code",[s._v("ss -nump")]),s._v(" 查看当前缓冲区的情况:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('$ ss -nump\nRecv-Q    Send-Q          Local Address:Port         Peer Address:Port    Process\n0         0             10.10.4.26%eth0:68              10.10.4.1:67       users:(("NetworkManager",pid=960,fd=22))\n     skmem:(r0,rb212992,t0,tb212992,f0,w0,o640,bl0,d0)\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("blockquote",[e("ol",[e("li",[e("code",[s._v("rb212992")]),s._v(" 表示 UDP 接收缓冲区大小是 "),e("code",[s._v("212992")]),s._v(" 字节，"),e("code",[s._v("tb212992")]),s._v(" 表示 UDP 发送缓存区大小是 "),e("code",[s._v("212992")]),s._v(" 字节。")]),s._v(" "),e("li",[e("code",[s._v("Recv-Q")]),s._v(" 和 "),e("code",[s._v("Send-Q")]),s._v(" 分别表示当前接收和发送缓冲区中的数据包字节数。")])])]),s._v(" "),e("p",[s._v("UDP 发送缓冲区大小取决于:")]),s._v(" "),e("ol",[e("li",[e("code",[s._v("net.core.wmem_default")]),s._v(" 和 "),e("code",[s._v("net.core.wmem_max")]),s._v(" 这两个内核参数，分别表示缓冲区的默认大小和最大上限。")]),s._v(" "),e("li",[s._v("如果程序自己调用 "),e("code",[s._v("setsockopt")]),s._v("设置"),e("code",[s._v("SO_SNDBUF")]),s._v("来自定义缓冲区大小，最终取值不会超过 "),e("code",[s._v("net.core.wmem_max")]),s._v("；如果程序没设置，则会使用 "),e("code",[s._v("net.core.wmem_default")]),s._v(" 作为缓冲区的大小。")])]),s._v(" "),e("p",[s._v("同理，UDP 接收缓冲区大小取决于:")]),s._v(" "),e("ol",[e("li",[e("code",[s._v("net.core.rmem_default")]),s._v(" 和 "),e("code",[s._v("net.core.rmem_max")]),s._v(" 这两个内核参数，分别表示缓冲区的默认大小和最大上限。")]),s._v(" "),e("li",[s._v("如果程序自己调用 "),e("code",[s._v("setsockopt")]),s._v("设置"),e("code",[s._v("SO_RCVBUF")]),s._v("来自定义缓冲区大小，最终取值不会超过 "),e("code",[s._v("net.core.rmem_max")]),s._v("；如果程序没设置，则会使用 "),e("code",[s._v("net.core.rmem_default")]),s._v(" 作为缓冲区的大小。")])]),s._v(" "),e("p",[s._v("需要注意的是，这些内核参数在容器网络命名空间中是无法设置的，是 Node 级别的参数，需要在节点上修改，建议修改值:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nnet.core.rmem_default=26214400 # socket receive buffer 默认值 (25M)，如果程序没用 setsockopt 更改 buffer 长度的话，默认用这个值。\nnet.core.wmem_default=26214400 # socket send buffer 默认值 (25M)，如果程序没用 setsockopt 更改 buffer 长度的话，默认用这个值。\nnet.core.rmem_max=26214400 # socket receive buffer 上限 (25M)，如果程序使用 setsockopt 更改 buffer 长度，最大不能超过此限制。\nnet.core.wmem_max=26214400 # socket send buffer 上限 (25M)，如果程序使用 setsockopt 更改 buffer 长度，最大不能超过此限制。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("如果程序自己有调用 "),e("code",[s._v("setsockopt")]),s._v(" 去设置 "),e("code",[s._v("SO_SNDBUF")]),s._v(" 或 "),e("code",[s._v("SO_RCVBUF")]),s._v("，建议设置到跟前面内核参数对应的最大上限值。")]),s._v(" "),e("h3",{attrs:{id:"调大-tcp-缓冲区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调大-tcp-缓冲区"}},[s._v("#")]),s._v(" 调大 TCP 缓冲区")]),s._v(" "),e("p",[s._v("TCP socket 的发送和接收缓冲区也是有上限的，不过对于发送缓冲区，即便满了也是不会丢包的，只是会让程序发送数据包时卡住，等待缓冲区有足够空间释放出来，所以一般不需要优化发送缓冲区。")]),s._v(" "),e("p",[s._v("对于接收缓冲区，在高并发环境如果较小，可能导致缓冲区满而丢包，从网络计数可以看出来:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ nstat -az | grep TcpExtTCPRcvQDrop\nTcpExtTCPRcvQDrop               264324                  0.0\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("还可以使用 "),e("code",[s._v("ss -ntmp")]),s._v(" 查看当前缓冲区情况:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('$ ss -ntmp\nESTAB        0             0                    [::ffff:109.244.190.163]:9988                       [::ffff:10.10.4.26]:54440         users:(("xray",pid=3603,fd=20))\n     skmem:(r0,rb12582912,t0,tb12582912,f0,w0,o0,bl0,d0)\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("blockquote",[e("ol",[e("li",[e("code",[s._v("rb12582912")]),s._v(" 表示 TCP 接收缓冲区大小是 "),e("code",[s._v("12582912")]),s._v(" 字节，"),e("code",[s._v("tb12582912")]),s._v(" 表示 UDP 发送缓存区大小是 "),e("code",[s._v("12582912")]),s._v(" 字节。")]),s._v(" "),e("li",[e("code",[s._v("Recv-Q")]),s._v(" 和 "),e("code",[s._v("Send-Q")]),s._v(" 分别表示当前接收和发送缓冲区中的数据包字节数。")])])]),s._v(" "),e("p",[s._v("如果存在 "),e("code",[s._v("net.ipv4.tcp_rmem")]),s._v(" 这个参数，对于 TCP 而言，会覆盖 "),e("code",[s._v("net.core.rmem_default")]),s._v(" 和 "),e("code",[s._v("net.core.rmem_max")]),s._v(" 的值。这个参数网络命名空间隔离的，而在容器网络命名空间中，一般默认是有配置的，所以如果要调整 TCP 接收缓冲区，需要显式在 Pod 级别配置下内核参数:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('net.ipv4.tcp_rmem="4096 26214400 26214400"\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("blockquote",[e("ol",[e("li",[s._v("单位是字节，分别是 min, default, max。")]),s._v(" "),e("li",[s._v("如果程序没用 setsockopt 更改 buffer 长度，就会使用 default 作为初始 buffer 长度(覆盖 "),e("code",[s._v("net.core.rmem_default")]),s._v(")，然后根据内存压力在 min 和 max 之间自动调整。")]),s._v(" "),e("li",[s._v("如果程序使用了 setsockopt 更改 buffer 长度，则使用传入的长度 (仍然受限于 "),e("code",[s._v("net.core.rmem_max")]),s._v(")。")])])]),s._v(" "),e("h2",{attrs:{id:"内核参数调优配置示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内核参数调优配置示例"}},[s._v("#")]),s._v(" 内核参数调优配置示例")]),s._v(" "),e("p",[s._v("调整 Pod 内核参数:")]),s._v(" "),e("div",{staticClass:"language-yaml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[s._v("      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("initContainers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" setsysctl\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" busybox\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("securityContext")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n          "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("privileged")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[s._v("true")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("command")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" sh\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("c\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("|")]),e("span",{pre:!0,attrs:{class:"token scalar string"}},[s._v('\n          sysctl -w net.core.somaxconn=65535\n          sysctl -w net.ipv4.ip_local_port_range="1024 65535"\n          sysctl -w net.ipv4.tcp_tw_reuse=1\n          sysctl -w fs.file-max=1048576\n          sysctl -w net.ipv4.tcp_rmem="4096 26214400 26214400"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("调整节点内核参数(修改 "),e("code",[s._v("/etc/sysctl.conf")]),s._v(" 并执行 "),e("code",[s._v("sysctl -p")]),s._v("):")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("net.core.rmem_default")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("26214400")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("net.core.wmem_default")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("26214400")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("net.core.rmem_max")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("26214400")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("net.core.wmem_max")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("26214400")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])])])}),[],!1,null,null,null);e.default=n.exports}}]);